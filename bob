#!/usr/bin/env python2
# ############################################################################
#
# BOB - Really simple build tool for single-file C++ sources
#
# Supports dependencies based on pkg-config, or legacy directory-based
# include files and directories.
#
# Paul Melis <paul.melis@surfsara.nl>
# Visualization Group, SURFsara
#
# ############################################################################
#
# The MIT License (MIT)
#
# Copyright (c) 2014 Paul E.C. Melis (paul.melis@surfsara.nl)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# ############################################################################
#
# June 2012
# First version
#
# June 29th, 2012
# Added substitution of environment variables
#
# July 5th, 2012
# Added -O and -g options
#
# September 27th, 2012
# Allow C source files, not just C++
#
# January 24th, 2013
# Added 'target' and 'outputfile' directives, added creating of shared object
#
# February 1st, 2013
# Small fixes
#
# February 2nd, 2013
# Added 'cflags' and 'lflags' directives
#
# June 12th, 2013
# Added 'legacyincludedir' and 'legacylibrarydir' directives
#
# July 16th, 2013
# Allow backtick expression with 'cflags' and 'lflags' directives
# Added display of (manually tracked) version number
#
# August 5th, 2013
# Added conditional directives and switches
#
# August 7th, 2013
# Fix bug in switch value not being taken into account
#
# August 16th, 2013
# Don't produce output except on error
#
# August 21th, 2013
# Fix bug in verbose mode with undefined output file name
# Fix assert using incorrect value
# Package config path handling was broken
# When using -v print environment vars in a readable way
#
# February 26th, 2014
# Small tweaks to help texts
# Added license text as we're going to publish this on github!

VERSION = '20140226.01'

import os, sys, subprocess, select, re
from optparse import OptionParser

parser = OptionParser(usage='%prog [options] <source-file>')

parser.set_defaults(
    dry_run=False,
    verbose=False,
    set_rpath=True,
    optimization_level=2,
    enable_debug = False,
    enabled_switches = []
)

parser.add_option('-n', '--dry-run', dest='dry_run', action='store_true',
    help='Don\'t actually do anything, just print command line to execute')
parser.add_option('-v', '--verbose', dest='verbose', action='store_true',
    help='Verbose output')
parser.add_option('-r', '--no-rpath', dest='set_rpath', action='store_false',
    help='Don\'t set rpath in executable (default: do set rpath)')
parser.add_option('-O', '--optimization-level', dest='optimization_level', action='store', type=int,
    help='Optimization level, i.e. -O<value> (default: %default%)')
parser.add_option('-g', '--debug', dest='enable_debug', action='store_true',
    help='Include debug information (default: no debug information)')
parser.add_option('-u', '--use', dest='enabled_switches', action='append',
    help='Turns the given switch on, always overrides switch directive in source')

(options, args) = parser.parse_args()

if len(args) < 1:
    parser.print_help()
    print
    print 'Version %s' % VERSION
    print
    print '/// packagedir       <dir>                   (<dir>/lib/pkgconfig is searched)'
    print '/// usepackage       <pkgname>'
    print '/// legacydir        <dir>                   (adds <dir>/include and <dir>/lib)'
    print '/// legacyincludedir <dir>'
    print '/// legacylibrarydir <dir>'
    print '/// uselibrary       <libname>'
    print '/// rpath            <dir>                   (extra rpath to use)'
    print '/// target           executable|sharedlib'
    print '/// outputfile       <filename>'
    print '/// cflags           <flags>                 (may contain `<expr>`)'
    print '/// lflags           <flags>                 (may contain `<expr>`)'
    print
    print '/// switch           <name> 0|1              (0|1 value specifies the default)'
    print '/// {<conditional>}  directive ...           (note: <conditional> is eval()ed!)'
    print
    sys.exit(0)

source_fullpath = args[0]

source_file = os.path.split(source_fullpath)[-1]
source_base, source_ext = os.path.splitext(source_file)

if source_ext == '.c':
    source_type = 'c'
elif source_ext in ['.cpp', '.cxx', '.CC']:
    source_type = 'cpp'
else:
    print 'Source file should be C or C++ source!'
    sys.exit(-1)

envvar_pat = re.compile('\$([A-Za-z_][A-Za-z0-9_]*)')

def replace_environment_variables(s):
    vars = re.findall(envvar_pat, s)
    for v in vars:
        if v not in os.environ:
            print 'Environment variable "%s" not set, can\'t replace it in string:' % v
            print s
            continue
        s = s.replace('$'+v, os.environ[v])
    return s

switches = {}
for switch in options.enabled_switches:
    if switch.find(',') != -1:
        for sw in map(lambda x: x.strip(), switch.split(',')):
            switches[sw] = True
    else:
        switches[switch] = True

target = 'executable'
output_file = ''

cflags = []
lflags = []
libs = []

cflags.append('-O%d' % options.optimization_level)
if options.enable_debug:
    cflags.append('-g')

package_directories = []
packages_to_use = []
legacy_include_directories = []
legacy_library_directories = []
legacy_libraries = []
runtime_library_paths = []

# XXX handle can't-open-file
f = open(source_fullpath, 'rt')
for line in f.readlines():

    if not line.startswith('/// '):
        break

    line = line[4:].strip()

    # Check for conditional
    pat = re.compile('^\{([^\}]+)}')
    m = pat.search(line)
    if m:
        conditional_expr = m.group(1)
        # XXX yuck, eval :)
        res = eval(conditional_expr, {}, switches)
        if not res:
            # Condition false, don't execute the directive
            continue
        # Strip off conditional and process directive line as usual
        line = line[m.end(0):].strip()

    space = line.find(' ')
    if space == -1:
        print 'No directive found:'
        print line
        continue

    directive = line[:space]
    argpart = line[space+1:]

    if directive == 'target':
        target = argpart
        assert target in ['executable', 'sharedlib']
    elif directive == 'outputfile':
        output_file = argpart
    elif directive == 'packagedir':
        assert '~' not in argpart
        dir = replace_environment_variables(argpart)
        package_directories.append(dir)
    elif directive == 'usepackage':
        packages_to_use.append(argpart)
    elif directive == 'legacydir':
        assert '~' not in argpart
        dir = replace_environment_variables(argpart)
        legacy_include_directories.append(os.path.join(dir, 'include'))
        legacy_library_directories.append(os.path.join(dir, 'lib'))
    elif directive == 'legacyincludedir':
        assert '~' not in argpart
        dir = replace_environment_variables(argpart)
        legacy_include_directories.append(dir)
    elif directive == 'legacylibrarydir':
        assert '~' not in argpart
        dir = replace_environment_variables(argpart)
        legacy_library_directories.append(dir)
    elif directive == 'uselibrary':
        legacy_libraries.append(argpart)
    elif directive == 'rpath':
        assert '~' not in argpart
        dir = replace_environment_variables(argpart)
        runtime_library_paths.append(dir)
    elif directive == 'cflags':
        pat = re.compile("`([^`]+)`")
        m = pat.search(argpart.strip())
        if m:
            cmd = m.group(1)
            pipe = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
            stdout, stderr = pipe.communicate()
            if pipe.returncode != 0:
                print 'Running command "%s" failed!' % cmd
                sys.exit(-1)
            cflags.extend(stdout.strip().split())
        else:
            cflags.append(argpart)
    elif directive == 'lflags':
        pat = re.compile("`([^`]+)`")
        m = pat.search(argpart.strip())
        if m:
            cmd = m.group(1)
            pipe = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
            stdout, stderr = pipe.communicate()
            if pipe.returncode != 0:
                print 'Running command "%s" failed!' % cmd
                sys.exit(-1)
            lflags.extend(stdout.strip().split())
        else:
            lflags.append(argpart)
    elif directive == 'switch':
        pat = re.compile('^([A-Z_][A-Z0-9_]*)\s+([01])$')
        m = pat.search(argpart.strip())
        if m:
            switch = m.group(1)
            if switch in switches:
                # Don't override already assigned value (i.e. specified on command line)
                continue
            enable = bool(int(m.group(2)))
            switches[switch] = enable
        else:
            print 'Incorrectly formed switch directive:'
            print line
            sys.exit(-1)
    else:
        print 'Unrecognized line (directive = "%s"):' % directive
        print line
        sys.exit(-1)
f.close()

if options.verbose:
    print 'Compiling %s -> %s' % (source_fullpath, output_file)

env = os.environ.copy()

# Set PKG_CONFIG_PATH
pcp = ''
if 'PKG_CONFIG_PATH' in env:
    pcp = env['PKG_CONFIG_PATH']
for dir in package_directories:
    if pcp != '':
        pcp += ':'
    pcp += '%s/lib/pkgconfig' % dir
env['PKG_CONFIG_PATH'] = pcp

if options.verbose:
    print 'ENVIRONMENT:'
    for key in sorted(env.keys()):
        print '%30s : %s' % (key, env[key])
    print

if source_type == 'c':
    compiler = 'gcc'
else:
    compiler = 'g++'

if output_file == '':
    if target == 'sharedlib':
        output_file = source_base+'.so'
    else:
        output_file = source_base

assert os.path.abspath(source_fullpath) != os.path.abspath(output_file)

if target == 'sharedlib':
    cflags.append('-fPIC')
    cflags.append('-shared')

# Switches

if options.verbose:
    print 'SWITCHES:'
    print switches
    print

for switch, value in switches.iteritems():
    if value:
        cflags.append('-DUSE_%s' % switch)

# Add compiler arguments for packages used

for pkg in packages_to_use:
    # Check if package is available
    # --print-errors
    pipe = subprocess.Popen(['pkg-config', '--exists', pkg], env=env, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = pipe.communicate()
    exists = pipe.returncode == 0
    if not exists:
        print 'Package %s not found by pkg-config!' % pkg
        print stdout, stderr
        sys.exit(-1)

    # Get cflags
    pipe = subprocess.Popen(['pkg-config', '--cflags', pkg], env=env, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = pipe.communicate()
    if pipe.returncode != 0:
        print 'Could not get --cflags for package %s!' % pkg
        print stdout
        print stderr
        sys.exit(-1)

    for arg in stdout.strip().split(' '):
        if arg == '':
            continue
        cflags.append(arg)

    # Get libs
    pipe = subprocess.Popen(['pkg-config', '--libs', pkg], env=env, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = pipe.communicate()
    if pipe.returncode != 0:
        print 'Could not get --libs for package %s!' % pkg
        print stdout
        print stderr
        sys.exit(-1)

    for arg in stdout.strip().split(' '):
        if arg == '':
            continue
        libs.append(arg)

    # Try to find runtime library path
    pipe = subprocess.Popen(['pkg-config', '--libs-only-L', pkg], env=env, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = pipe.communicate()
    if pipe.returncode != 0:
        print 'Could not get --libs-only-L for package %s!' % pkg
        print stdout
        print stderr
        sys.exit(-1)

    for arg in stdout.strip().split(' '):
        if arg == '' or not arg.startswith('-L'):
            continue
        runtime_library_paths.append(arg[2:])

# Same for legacy stuff

for dir in legacy_include_directories:
    cflags.append('-I%s' % dir)
for dir in legacy_library_directories:
    libs.append('-L%s' % dir)
    runtime_library_paths.append(dir)
for lib in legacy_libraries:
    libs.append('-l%s' % lib)

if options.verbose:
    print 'CFLAGS:'
    print cflags
    print
    print 'LIBS:'
    print libs
    print
    print 'RUNTIME LIBRARY PATHS:'
    print runtime_library_paths
    print

compile_args = [compiler]
compile_args.extend(cflags)
compile_args.extend(['-o', output_file])
compile_args.append(source_fullpath)
compile_args.extend(lflags)
compile_args.extend(libs)
if options.set_rpath:
    for p in runtime_library_paths:
        compile_args.append('-Wl,-rpath=%s' % p)

if options.verbose:
    print 'FINAL COMPILER COMMAND:'
    print compile_args
    print
    print ' '.join(compile_args)
    print

if options.dry_run:
    print 'DRY RUN, WOULD EXECUTE:'
    print compile_args
    sys.exit(0)

pipe = subprocess.Popen(compile_args, env=env, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

r, w, e = select.select([pipe.stdout, pipe.stderr], [], [])
for f in r:
    s = f.read()
    if s != '':
        print s

pipe.wait()

if pipe.returncode != 0:
    print 'FAILED!'
